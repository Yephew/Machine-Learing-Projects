{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "import numpy as np"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 260,
   "metadata": {},
   "outputs": [],
   "source": [
    "def separable_conv2d(C, H, W, R_H, R_W,F, input_t, dweights, pweights):\n",
    "    out_t = np.empty([F, H, W])\n",
    "    \n",
    "    # Padding\n",
    "    pad_along_height = max((H - 1) + R_H - H, 0)\n",
    "    pad_along_width = max((W - 1) + R_W - W, 0)\n",
    "    pad_top = pad_along_height // 2\n",
    "    pad_bottom = pad_along_height - pad_top\n",
    "    pad_left = pad_along_width // 2\n",
    "    pad_right = pad_along_width - pad_left\n",
    "    \n",
    "    input_t_pad = np.insert(input_t, 0, values=np.zeros([pad_top, C, W]), axis=1)\n",
    "    input_t_pad = np.insert(input_t_pad, H + pad_top, values=np.zeros([pad_bottom, C, W]), axis=1)\n",
    "\n",
    "    input_t_pad = np.insert(input_t_pad, 0, values=np.zeros([pad_left, C, H + pad_along_height]), axis=2)\n",
    "    input_t_pad = np.insert(input_t_pad, W + pad_left, values=np.zeros([pad_right, C, H + pad_along_height]), axis=2)\n",
    "    \n",
    "    # The depth conv\n",
    "    out_put_1 = conv(C, H, W, R_H, R_W, input_t_pad, dweights)\n",
    "    \n",
    "    # The point conv\n",
    "    for f in range(F):\n",
    "        pweight_matrix = pweights[f].reshape(C, 1).repeat(H * W, axis = 1).reshape([C, H, W])\n",
    "        out_t[f] = np.sum(out_put_1 * pweight_matrix, axis = 0)\n",
    "    \n",
    "    return out_t"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 258,
   "metadata": {},
   "outputs": [],
   "source": [
    "def conv(C, H, W, R_H, R_W, input_t_pad, dweights):\n",
    "    res = np.empty([C, H, W])\n",
    "    \n",
    "    # Unroll the input and dweights into new matrix, which is convenient for matrix mutiply.\n",
    "    # See details here: https://hal.inria.fr/file/index/docid/112631/filename/p1038112283956.pdf\n",
    "    input_t_pad_matrix = np.empty([H * W, R_H * R_W])\n",
    "    dweights_matrix = np.empty([R_H * R_W, 1])\n",
    "    for l in range(C):\n",
    "        for i in range(H):\n",
    "            for j in range(W):\n",
    "                input_t_pad_matrix[i * H + j] = np.ndarray.flatten(input_t_pad[l, i:(i + R_H), j:(j + R_W)])\n",
    "        res[l] = input_t_pad_matrix.dot(np.ndarray.flatten(dweights[l,:,:]).reshape(R_H * R_W, 1)).reshape([H, W])\n",
    "    # output for depth conv layer.\n",
    "    return res"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 261,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[[ 4.  4.  4.  4.  2.]\n",
      "  [ 4.  4.  4.  4.  2.]\n",
      "  [ 4.  4.  4.  4.  2.]\n",
      "  [ 4.  4.  4.  4.  2.]\n",
      "  [ 2.  2.  2.  2.  1.]]\n",
      "\n",
      " [[ 4.  4.  4.  4.  2.]\n",
      "  [ 4.  4.  4.  4.  2.]\n",
      "  [ 4.  4.  4.  4.  2.]\n",
      "  [ 4.  4.  4.  4.  2.]\n",
      "  [ 2.  2.  2.  2.  1.]]\n",
      "\n",
      " [[ 4.  4.  4.  4.  2.]\n",
      "  [ 4.  4.  4.  4.  2.]\n",
      "  [ 4.  4.  4.  4.  2.]\n",
      "  [ 4.  4.  4.  4.  2.]\n",
      "  [ 2.  2.  2.  2.  1.]]]\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "array([[[ 12.,  12.,  12.,  12.,   6.],\n",
       "        [ 12.,  12.,  12.,  12.,   6.],\n",
       "        [ 12.,  12.,  12.,  12.,   6.],\n",
       "        [ 12.,  12.,  12.,  12.,   6.],\n",
       "        [  6.,   6.,   6.,   6.,   3.]],\n",
       "\n",
       "       [[ 12.,  12.,  12.,  12.,   6.],\n",
       "        [ 12.,  12.,  12.,  12.,   6.],\n",
       "        [ 12.,  12.,  12.,  12.,   6.],\n",
       "        [ 12.,  12.,  12.,  12.,   6.],\n",
       "        [  6.,   6.,   6.,   6.,   3.]],\n",
       "\n",
       "       [[ 12.,  12.,  12.,  12.,   6.],\n",
       "        [ 12.,  12.,  12.,  12.,   6.],\n",
       "        [ 12.,  12.,  12.,  12.,   6.],\n",
       "        [ 12.,  12.,  12.,  12.,   6.],\n",
       "        [  6.,   6.,   6.,   6.,   3.]],\n",
       "\n",
       "       [[ 12.,  12.,  12.,  12.,   6.],\n",
       "        [ 12.,  12.,  12.,  12.,   6.],\n",
       "        [ 12.,  12.,  12.,  12.,   6.],\n",
       "        [ 12.,  12.,  12.,  12.,   6.],\n",
       "        [  6.,   6.,   6.,   6.,   3.]],\n",
       "\n",
       "       [[ 12.,  12.,  12.,  12.,   6.],\n",
       "        [ 12.,  12.,  12.,  12.,   6.],\n",
       "        [ 12.,  12.,  12.,  12.,   6.],\n",
       "        [ 12.,  12.,  12.,  12.,   6.],\n",
       "        [  6.,   6.,   6.,   6.,   3.]],\n",
       "\n",
       "       [[ 12.,  12.,  12.,  12.,   6.],\n",
       "        [ 12.,  12.,  12.,  12.,   6.],\n",
       "        [ 12.,  12.,  12.,  12.,   6.],\n",
       "        [ 12.,  12.,  12.,  12.,   6.],\n",
       "        [  6.,   6.,   6.,   6.,   3.]],\n",
       "\n",
       "       [[ 12.,  12.,  12.,  12.,   6.],\n",
       "        [ 12.,  12.,  12.,  12.,   6.],\n",
       "        [ 12.,  12.,  12.,  12.,   6.],\n",
       "        [ 12.,  12.,  12.,  12.,   6.],\n",
       "        [  6.,   6.,   6.,   6.,   3.]],\n",
       "\n",
       "       [[ 12.,  12.,  12.,  12.,   6.],\n",
       "        [ 12.,  12.,  12.,  12.,   6.],\n",
       "        [ 12.,  12.,  12.,  12.,   6.],\n",
       "        [ 12.,  12.,  12.,  12.,   6.],\n",
       "        [  6.,   6.,   6.,   6.,   3.]]])"
      ]
     },
     "execution_count": 261,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "separable_conv2d(3, 5, 5, 2, 2,8, np.ones([3,5,5]), np.ones([3, 2, 2]), np.ones([8, 3]))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 245,
   "metadata": {},
   "outputs": [],
   "source": [
    "input_t = np.array([[[1,2,0],\n",
    "         [ 1,1,3],\n",
    "         [ 0,2,2]],\n",
    "        [[ 0,2,1],\n",
    "         [0,3,2],\n",
    "         [1,1,0]],\n",
    " \n",
    "        [[ 1,2,1],\n",
    "         [ 0,1,3],\n",
    "         [ 3,3,2]]])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 246,
   "metadata": {},
   "outputs": [],
   "source": [
    "dweights  = np.array([[[ 1,  1],\n",
    "        [ 2,  2]],\n",
    "\n",
    "       [[ 1,  1],\n",
    "        [ 1,  1]],\n",
    "\n",
    "       [[ 0,  1],\n",
    "        [ 1,  0]]])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 256,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0\n",
      "1\n",
      "2\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "array([[[  7.,  10.],\n",
       "        [  6.,  12.]],\n",
       "\n",
       "       [[  5.,   8.],\n",
       "        [  5.,   6.]],\n",
       "\n",
       "       [[  2.,   2.],\n",
       "        [  4.,   6.]]])"
      ]
     },
     "execution_count": 256,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "conv(3, 2, 2, 2, 2, input_t_pad, dweights)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.1"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
